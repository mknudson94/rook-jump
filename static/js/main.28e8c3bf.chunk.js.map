{"version":3,"sources":["boardGenerator.js","Game.js","App.js","index.js"],"names":["randomInt","max","Math","round","random","floor","lin2grid","i","size","row","col","GameBoard","board","difficulty","fitness","arguments","length","undefined","solution","isSuccessor","gameBoard","active","sameColumn","sameRow","horizontalAway","abs","verticalAway","curr","frontier","explored","goal","paths","0","push","shift","successors","_i","_successors","successor","includes","concat","hasOwnProperty","getNeighbor","neighbor","slice","initGameBoard","Array","pow","fill","pos","boardGenerator","restartRate","_ret","forEach","console","log","v","Game","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","boardData","activeSquare","userPath","history","reveal","prevProps","setState","path","coor","last","pop","_this2","string","react_default","a","createElement","Game_BoardOverlay","Game_Board","squares","onClick","handleClick","className","handleUndo","handleSolveClick","React","Component","Square","value","Board","_this3","key","rows","j","index","renderSquare","BoardOverlay","x","y","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","Symbol","iterator","next","done","width","height","err","return","shapes","xDiff","yDiff","x1","sign","y1","d","stroke","cx","cy","r","App","handleOptionChange","e","target","forceUpdate","src_Game","App_DifficultyRadio","onChange","DifficultyRadio","buttons","type","checked","ReactDOM","render","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.28e8c3bf.chunk.js","sourcesContent":["function randomInt(max) {\r\n    return Math.round(Math.random() * Math.floor(max));\r\n  }\r\n\r\n// function weightedRandom(max, min=1) {\r\n//     // found in comments of https://stackoverflow.com/questions/8435183/generate-a-weighted-random-number\r\n//     // tends exponentially to min\r\n//     return max + 1 - Math.round(max / (Math.random() * max + min));\r\n// }\r\n\r\n// function grid2lin(pos, size) {\r\n//     return pos.row * size + pos.col;\r\n// }\r\n\r\nfunction lin2grid(i, size) {\r\n    return {\r\n        row: Math.floor(i / size),\r\n        col: i % size\r\n    };\r\n}\r\n\r\nfunction GameBoard(board, size, difficulty, fitness=0, solution=null) {\r\n    return {board, size, difficulty, fitness, solution};\r\n}\r\n\r\nfunction isSuccessor(gameBoard, active, i) {\r\n    let board = gameBoard.board;\r\n    let size = gameBoard.size;\r\n    let sameColumn = ((i - active) % size === 0);\r\n    let sameRow = (Math.floor(i/size) === Math.floor(active/size));\r\n    let horizontalAway = (Math.abs(i-active) === board[active]);\r\n    let verticalAway = (Math.abs(Math.floor(i / size) - Math.floor(active / size)) === board[active]);\r\n    return ((sameRow && horizontalAway) || (sameColumn && verticalAway)); \r\n  }\r\n\r\nfunction fitness(gameBoard) {\r\n    // fitness of board, fitness of 0 means no solutions.\r\n    let fitness = 0;\r\n    let frontier = [];\r\n    let explored = [];\r\n    let goal = gameBoard.board.length - 1;\r\n\r\n    let paths = {\r\n        0: [0],\r\n    }    \r\n\r\n    frontier.push(0);\r\n    let curr;\r\n    while (frontier.length !== 0) {\r\n        curr = frontier.shift();\r\n        explored.push(curr);\r\n        let successors = [];\r\n        // TODO: optimize this\r\n        for (let i = 0; i < gameBoard.board.length; i++) {\r\n            if (isSuccessor(gameBoard, curr, i)) {\r\n                successors.push(i);\r\n            }\r\n        }\r\n        for (let successor of successors) {\r\n            // test for solvability\r\n            if (successor === goal) fitness = 1;\r\n            if (!explored.includes(successor) && !frontier.includes(successor)) {\r\n                frontier.push(successor);\r\n                paths[successor] =  paths[curr].concat(successor);\r\n            } \r\n        };\r\n    }\r\n    if (paths.hasOwnProperty(goal)) fitness *= paths[goal].length / gameBoard.difficulty;\r\n\r\n    return GameBoard(gameBoard.board, gameBoard.size, gameBoard.difficulty, fitness, paths[goal]);\r\n}\r\n\r\nfunction getNeighbor(gameBoard) {\r\n    // randomly change a square's value to the value of another square.\r\n    // This bypasses the need to calculate the max permissible value.\r\n    // Swap with any square other than goal(choose from index 0 to length - 2), which is 0.\r\n    let neighbor = gameBoard.board.slice();\r\n    neighbor[randomInt(neighbor.length - 2)] = neighbor[randomInt(neighbor.length - 2)];\r\n    return fitness(GameBoard(neighbor, gameBoard.size, gameBoard.difficulty));\r\n}\r\n\r\nfunction initGameBoard(size, difficulty) {\r\n    let board = Array(size**2).fill(null);\r\n    \r\n    for (let i = 0; i < size**2; i++) {\r\n        let pos = lin2grid(i, size);\r\n        let max = Math.max(Math.abs(pos.row - Math.floor(size/2)), Math.abs(pos.col - Math.floor(size/2))) + Math.floor(size/2);\r\n        // one's tricks to make sure we don't get any zeros\r\n        board[i] = randomInt(max - 1) + 1;\r\n    }\r\n\r\n    board[board.length - 1] = 0;\r\n\r\n    return fitness(GameBoard(board, size, difficulty));\r\n}\r\n\r\nfunction boardGenerator(difficulty) {\r\n    let restartRate = 30 + 10 * difficulty;\r\n    let size = Math.floor((difficulty - 1)/3) + 4;\r\n    let gameBoard = initGameBoard(size, difficulty);\r\n\r\n    // hill climb with random restart\r\n    // infinite loop, with inc variable\r\n    for (let i = 0; true; i++) {\r\n        let neighbor = getNeighbor(gameBoard);\r\n        if (neighbor.fitness > gameBoard.fitness) {\r\n            gameBoard = neighbor;\r\n        }\r\n\r\n        if (gameBoard.fitness > 1) {\r\n            //prep for return\r\n            let solution = [];\r\n            gameBoard.solution.forEach(i => solution.push(lin2grid(i, gameBoard.size)));\r\n            gameBoard.solution = solution;\r\n            console.log(gameBoard);\r\n            return gameBoard;\r\n        } else if (i % restartRate === 0) {\r\n            // RANDOM RESTART\r\n            gameBoard = initGameBoard(size, difficulty);\r\n        }\r\n    }\r\n}\r\n\r\nexport default boardGenerator;\r\nexport { lin2grid };","import React from 'react';\r\nimport boardGenerator, { lin2grid } from './boardGenerator.js';\r\n\r\nclass Game extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      boardData: boardGenerator(props.difficulty),\r\n      activeSquare: 0,\r\n      userPath: [{row:0, col:0}],\r\n      history: [],\r\n      reveal: false\r\n    }\r\n  }\r\n\r\n  componentDidUpdate(prevProps) {\r\n    if (prevProps.difficulty !== this.props.difficulty) {\r\n      console.log('updating board');\r\n      this.setState({\r\n        activeSquare: 0,\r\n        boardData: boardGenerator(this.props.difficulty),\r\n        path: [{row:0, col:0}],\r\n        reveal: false\r\n      });\r\n\r\n  }\r\n}\r\n\r\n  isSuccessor(i) {\r\n    let active = this.state.activeSquare;\r\n    let board = this.state.boardData.board;\r\n    let sameColumn = ((i - active) % this.state.boardData.size === 0);\r\n    let sameRow = (Math.floor(i/this.state.boardData.size) === Math.floor(active/this.state.boardData.size));\r\n    let horizontalAway = (Math.abs(i-active) === board[active]);\r\n    let verticalAway = (Math.abs(Math.floor(i / this.state.boardData.size) - Math.floor(active / this.state.boardData.size)) === board[active]);\r\n    return ((sameRow && horizontalAway) || (sameColumn && verticalAway)); \r\n  }\r\n\r\n  handleClick(i) {\r\n    if (this.isSuccessor(i)) {\r\n      // update history\r\n      let history = this.state.history.slice();\r\n      history.push({\r\n        activeSquare: this.state.activeSquare,\r\n        userPath: this.state.userPath\r\n      });\r\n      \r\n      // update path\r\n      let coor = lin2grid(i, this.state.boardData.size);\r\n      let userPath = this.state.userPath.concat(coor);\r\n\r\n      this.setState({\r\n        activeSquare: i,\r\n        userPath,\r\n        history\r\n      });\r\n    }\r\n  }\r\n\r\n  handleSolveClick() {\r\n    this.setState({reveal: !this.state.reveal});\r\n  }\r\n\r\n  handleUndo() {\r\n    let history = this.state.history;\r\n    let last = history.pop();\r\n    this.setState({\r\n      activeSquare: last.activeSquare,\r\n      userPath: last.userPath,\r\n      history: history\r\n    });\r\n  }\r\n\r\n  render() {\r\n    let goal = this.state.boardData.size**2 - 1;\r\n    let string = this.state.activeSquare === goal ? (<div>You win!</div>) : (<div>Active square: {this.state.activeSquare}</div>);\r\n    return(\r\n      <div>\r\n        <BoardOverlay\r\n          size={this.state.boardData.size}\r\n          path={this.state.reveal ? this.state.boardData.solution : this.state.userPath}\r\n        />\r\n        <Board\r\n          squares={this.state.boardData.board}\r\n          difficulty={this.props.difficulty} \r\n          size={this.state.boardData.size}\r\n          onClick={(i) => this.handleClick(i)}\r\n        />\r\n        <div className=\"game-info\">\r\n          {string}\r\n        </div>\r\n        <button className=\"undo\" onClick={() => this.handleUndo()}>Undo</button>\r\n        <button className=\"solvePrompt\" onClick={() => this.handleSolveClick()}>Reveal solution?</button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nfunction Square(props) {\r\n  return (\r\n    <button className=\"square\" onClick={props.onClick}>\r\n      {props.value}\r\n    </button>\r\n  );\r\n}\r\n\r\nclass Board extends React.Component {\r\n\r\n  renderSquare(i) {\r\n    return(\r\n      <Square\r\n        key={i}\r\n        value={this.props.squares[i]}\r\n        onClick={() => this.props.onClick(i)}/>\r\n    );\r\n  }\r\n  \r\n  render() {\r\n    let rows = []\r\n    \r\n    for (let i = 0; i < this.props.size; i++) {\r\n      let squares = [];\r\n      for (let j = 0; j < this.props.size; j++) {\r\n        let index = i * this.props.size + j;\r\n        squares.push(this.renderSquare(index));\r\n      }\r\n      rows.push(<div key={i} className=\"board-row\">{squares}</div>);\r\n    }\r\n\r\n\r\n    return(\r\n      <div>\r\n        {rows}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nclass BoardOverlay extends React.Component {\r\n      render() {\r\n        let width = 33\r\n        let height = 33;\r\n        \r\n        let x = [] \r\n        let y = [];\r\n        for (let coor of this.props.path || []) {\r\n          x.push(coor.col * width + width/2);\r\n          y.push(coor.row * height + height/2);\r\n        }\r\n\r\n        let shapes = []\r\n        for (let i = 0; i < this.props.path.length - 1; i++) {\r\n          let xDiff = x[i+1] - x[i];\r\n          let yDiff = y[i+1] - y[i];\r\n          let x1 = ( xDiff / 2 ) || ( 10 * Math.sign(yDiff) );\r\n          let y1 = ( yDiff / 2 ) || ( -10 * Math.sign(xDiff) );\r\n          shapes.push(<path key={i*2} d={`M ${x[i]} ${y[i]} Q ${x[i] + x1} ${y[i] + y1}, ${x[i+1]} ${y[i+1]}`} stroke=\"black\" fill=\"transparent\"/>);\r\n          shapes.push(<circle key={i*2 + 1} cx={x[i+1]} cy={y[i+1]} r=\"3\" fill=\"red\" />);\r\n        }\r\n\r\n        return (\r\n          <svg className=\"overlay\" height={height * this.props.size} width={width * this.props.size}>\r\n            {shapes}\r\n          </svg>\r\n        );\r\n      }\r\n}\r\n\r\nexport default Game;","import React from 'react';\nimport Game from './Game.js'\n\nclass App extends React.Component {\n  \n  constructor(props) {\n    super(props);\n    this.state = {\n      difficulty: 5\n    }\n  }\n\n  handleOptionChange = e => {\n    console.log(`${e.target.value} has been selected!`);\n    this.setState( { difficulty: e.target.value } );\n    this.forceUpdate();\n  }\n\n  render() {\n\n    return (\n      <div>\n        <Game\n          difficulty={this.state.difficulty}\n        />\n        <div>\n          <DifficultyRadio\n            difficulty={this.state.difficulty}\n            onChange={e => this.handleOptionChange(e)}\n          />\n        </div>    \n      </div>\n    );\n  }\n}\n\nclass DifficultyRadio extends React.Component {\n  render() {\n    let buttons = [];\n    for (let i = 0; i < 10; i++) {\n      buttons.push(\n        <div key={i}>\n          <input\n            type=\"radio\"\n            value={i + 1}\n            checked={this.props.difficulty == i + 1}\n            onChange={this.props.onChange}\n          />\n          {i + 1}\n        </div>\n      );\n    }\n    return(\n      <div>\n        {buttons}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n"],"sourceRoot":""}