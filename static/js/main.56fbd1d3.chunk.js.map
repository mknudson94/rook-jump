{"version":3,"sources":["components/Board.js","components/BoardOverlay.js","components/DifficultyRadio.js","boardGenerator.js","components/Game.js","components/App.js","index.js"],"names":["Square","props","react_default","a","createElement","Button_default","className","classes","square","onClick","value","Board","i","_this","this","key","squares","rows","size","j","index","push","renderSquare","React","Component","withStyles","background","border","borderRadius","float","fontSize","fontWeight","lineHeight","height","width","minWidth","marginRight","marginTop","padding","textAlign","hover","BoardOverlay","_this$props","x","y","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","path","Symbol","iterator","next","done","coor","col","boxWidth","row","boxHeight","err","return","shapes","length","xDiff","yDiff","x1","Math","sign","y1","d","concat","stroke","fill","cx","cy","r","overlay","DifficultyRadio","buttons","_loop","radioButton","variant","disabled","difficulty","onChange","randomInt","max","round","random","floor","lin2grid","GameBoard","board","fitness","arguments","solution","isSuccessor","gameBoard","active","sameColumn","sameRow","horizontalAway","abs","verticalAway","curr","frontier","explored","goal","paths","0","shift","successors","_i","_successors","successor","includes","hasOwnProperty","getNeighbor","neighbor","slice","initGameBoard","Array","pow","pos","boardGenerator","restartRate","_ret","forEach","console","log","v","Game","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","handleExpandClick","setState","state","expanded","boardData","activeSquare","userPath","history","reveal","prevProps","last","pop","_this2","string","Typography_default","Card_default","containerCard","CardContent_default","cardContent","boardAndOverlayContainer","components_BoardOverlay","src_components_Board","handleClick","controls","Divider_default","style","margin","actionButton","color","handleUndo","handleSolveClick","CardActions_default","actions","disableActionSpacing","marginLeft","IconButton_default","expandOpen","expand","aria-expanded","aria-label","ExpandMore_default","Collapse_default","in","collapseContainer","components_DifficultyRadio","handleRadioChange","theme","minHeight","maxWidth","display","justifyContent","alignItems","position","flexDirection","marginBottom","transform","transition","transitions","create","duration","shortest","App","handleOptionChange","newDifficulty","forceUpdate","Fragment","Paper_default","gameContainer","components_Game","textContainer","paragraph","List_default","ListItem_default","inline","paddingTop","ReactDOM","render","components_App","document","getElementById"],"mappings":"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","file":"static/js/main.56fbd1d3.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\nimport {withStyles} from '@material-ui/core/styles';\r\nimport Button from '@material-ui/core/Button';\r\nimport './Board.css';\r\n\r\nconst styles = ({\r\n    square: {\r\n        background: 'rgba(255, 255, 255, 0)',\r\n        border: '1px solid #999',\r\n        borderRadius: 0,\r\n        float: 'left',\r\n        fontSize: '22px',\r\n        fontWeight: 'bold',\r\n        lineHeight: '34px',\r\n        height: '34px',\r\n        width: '34px',\r\n        minWidth: '34px',\r\n        marginRight: '-1px',\r\n        marginTop: '-1px',\r\n        padding: 0,\r\n        textAlign: 'center',\r\n      },\r\n      hover: {},\r\n});\r\n\r\nfunction Square(props) {\r\n  return (\r\n    <Button className={props.classes.square} onClick={props.onClick}>\r\n      {props.value}\r\n    </Button>\r\n  );\r\n}\r\n  \r\n  class Board extends React.Component {\r\n  \r\n  renderSquare(i) {\r\n    return(\r\n      <Square\r\n        key={i}\r\n        value={this.props.squares[i]}\r\n        onClick={() => this.props.onClick(i)}\r\n        classes={this.props.classes}\r\n        />\r\n    );\r\n  }\r\n    \r\n    render() {\r\n      let rows = []\r\n      \r\n      for (let i = 0; i < this.props.size; i++) {\r\n        let squares = [];\r\n        for (let j = 0; j < this.props.size; j++) {\r\n          let index = i * this.props.size + j;\r\n          squares.push(this.renderSquare(index));\r\n        }\r\n        rows.push(<div key={i} className=\"board-row\">{squares}</div>);\r\n      }\r\n  \r\n  \r\n      return(\r\n        <div>\r\n          {rows}\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n\r\nexport default withStyles(styles)(Board);","import React, {Component} from 'react';\r\nimport {withStyles} from '@material-ui/core/styles';\r\n\r\nlet boxWidth = 33;\r\nlet boxHeight = 33;\r\n\r\nconst styles = ({\r\n  overlay: {\r\n  }\r\n});\r\n\r\nclass BoardOverlay extends React.Component {\r\n\r\n  render() {\r\n    const { classes, size } = this.props;\r\n    \r\n    let x = [] \r\n    let y = [];\r\n    for (let coor of this.props.path || []) {\r\n      x.push(coor.col * boxWidth + boxWidth/2);\r\n      y.push(coor.row * boxHeight + boxHeight/2);\r\n    }\r\n\r\n    let shapes = []\r\n    for (let i = 0; i < this.props.path.length - 1; i++) {\r\n      let xDiff = x[i+1] - x[i];\r\n      let yDiff = y[i+1] - y[i];\r\n      let x1 = ( xDiff / 2 ) || ( 10 * Math.sign(yDiff) );\r\n      let y1 = ( yDiff / 2 ) || ( -10 * Math.sign(xDiff) );\r\n      shapes.push(<path key={i*2} d={`M ${x[i]} ${y[i]} Q ${x[i] + x1} ${y[i] + y1}, ${x[i+1]} ${y[i+1]}`} stroke=\"black\" fill=\"transparent\"/>);\r\n      shapes.push(<circle key={i*2 + 1} cx={x[i+1]} cy={y[i+1]} r=\"3\" fill=\"red\" />);\r\n    }\r\n\r\n    return (\r\n      <svg className={classes.overlay} height={boxHeight * size} width={boxWidth * size}>\r\n        {shapes}\r\n      </svg>\r\n    );\r\n  }\r\n}\r\n\r\nexport default withStyles(styles)(BoardOverlay);","import React, {Component} from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport {withStyles} from '@material-ui/core/styles';\r\n\r\nconst styles = ({\r\n  radioButton: {\r\n    borderRadius: 0,\r\n    minWidth: 40,\r\n  },\r\n});\r\n\r\nclass DifficultyRadio extends React.Component {\r\n    render() {\r\n      const { classes } = this.props;\r\n      let buttons = [];\r\n      for (let i = 0; i < 10; i++) {\r\n        buttons.push(\r\n          <Button className={classes.radioButton}\r\n            key={i}\r\n            variant='contained'\r\n            size='small'\r\n            value={i + 1}\r\n            disabled={this.props.difficulty == i + 1}\r\n            onClick={() => this.props.onChange(i)}\r\n          >\r\n            {i + 1}\r\n          </Button>\r\n        );\r\n      }\r\n      return(\r\n        <div>\r\n          {buttons}\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n  \r\n  export default withStyles(styles)(DifficultyRadio);","function randomInt(max) {\r\n    return Math.round(Math.random() * Math.floor(max));\r\n  }\r\n\r\n// function weightedRandom(max, min=1) {\r\n//     // found in comments of https://stackoverflow.com/questions/8435183/generate-a-weighted-random-number\r\n//     // tends exponentially to min\r\n//     return max + 1 - Math.round(max / (Math.random() * max + min));\r\n// }\r\n\r\n// function grid2lin(pos, size) {\r\n//     return pos.row * size + pos.col;\r\n// }\r\n\r\nfunction lin2grid(i, size) {\r\n    return {\r\n        row: Math.floor(i / size),\r\n        col: i % size\r\n    };\r\n}\r\n\r\nfunction GameBoard(board, size, difficulty, fitness=0, solution=null) {\r\n    return {board, size, difficulty, fitness, solution};\r\n}\r\n\r\nfunction isSuccessor(gameBoard, active, i) {\r\n    let board = gameBoard.board;\r\n    let size = gameBoard.size;\r\n    let sameColumn = ((i - active) % size === 0);\r\n    let sameRow = (Math.floor(i/size) === Math.floor(active/size));\r\n    let horizontalAway = (Math.abs(i-active) === board[active]);\r\n    let verticalAway = (Math.abs(Math.floor(i / size) - Math.floor(active / size)) === board[active]);\r\n    return ((sameRow && horizontalAway) || (sameColumn && verticalAway)); \r\n  }\r\n\r\nfunction fitness(gameBoard) {\r\n    // fitness of board, fitness of 0 means no solutions.\r\n    let fitness = 0;\r\n    let frontier = [];\r\n    let explored = [];\r\n    let goal = gameBoard.board.length - 1;\r\n\r\n    let paths = {\r\n        0: [0],\r\n    }    \r\n\r\n    frontier.push(0);\r\n    let curr;\r\n    while (frontier.length !== 0) {\r\n        curr = frontier.shift();\r\n        explored.push(curr);\r\n        let successors = [];\r\n        // TODO: optimize this\r\n        for (let i = 0; i < gameBoard.board.length; i++) {\r\n            if (isSuccessor(gameBoard, curr, i)) {\r\n                successors.push(i);\r\n            }\r\n        }\r\n        for (let successor of successors) {\r\n            // test for solvability\r\n            if (successor === goal) fitness = 1;\r\n            if (!explored.includes(successor) && !frontier.includes(successor)) {\r\n                frontier.push(successor);\r\n                paths[successor] =  paths[curr].concat(successor);\r\n            } \r\n        };\r\n    }\r\n    if (paths.hasOwnProperty(goal)) fitness *= paths[goal].length / gameBoard.difficulty;\r\n\r\n    return GameBoard(gameBoard.board, gameBoard.size, gameBoard.difficulty, fitness, paths[goal]);\r\n}\r\n\r\nfunction getNeighbor(gameBoard) {\r\n    // randomly change a square's value to the value of another square.\r\n    // This bypasses the need to calculate the max permissible value.\r\n    // Swap with any square other than goal(choose from index 0 to length - 2), which is 0.\r\n    let neighbor = gameBoard.board.slice();\r\n    neighbor[randomInt(neighbor.length - 2)] = neighbor[randomInt(neighbor.length - 2)];\r\n    return fitness(GameBoard(neighbor, gameBoard.size, gameBoard.difficulty));\r\n}\r\n\r\nfunction initGameBoard(size, difficulty) {\r\n    let board = Array(size**2).fill(null);\r\n    \r\n    for (let i = 0; i < size**2; i++) {\r\n        let pos = lin2grid(i, size);\r\n        let max = Math.max(Math.abs(pos.row - Math.floor(size/2)), Math.abs(pos.col - Math.floor(size/2))) + Math.floor(size/2);\r\n        // one's tricks to make sure we don't get any zeros\r\n        board[i] = randomInt(max - 1) + 1;\r\n    }\r\n\r\n    board[board.length - 1] = 0;\r\n\r\n    return fitness(GameBoard(board, size, difficulty));\r\n}\r\n\r\nfunction boardGenerator(difficulty) {\r\n    let restartRate = 30 + 10 * difficulty;\r\n    let size = Math.floor((difficulty - 1)/3) + 4;\r\n    let gameBoard = initGameBoard(size, difficulty);\r\n\r\n    // hill climb with random restart\r\n    // infinite loop, with inc variable\r\n    for (let i = 0; true; i++) {\r\n        let neighbor = getNeighbor(gameBoard);\r\n        if (neighbor.fitness > gameBoard.fitness) {\r\n            gameBoard = neighbor;\r\n        }\r\n\r\n        if (gameBoard.fitness > 1) {\r\n            //prep for return\r\n            let solution = [];\r\n            gameBoard.solution.forEach(i => solution.push(lin2grid(i, gameBoard.size)));\r\n            gameBoard.solution = solution;\r\n            console.log(gameBoard);\r\n            return gameBoard;\r\n        } else if (i % restartRate === 0) {\r\n            // RANDOM RESTART\r\n            gameBoard = initGameBoard(size, difficulty);\r\n        }\r\n    }\r\n}\r\n\r\nexport default boardGenerator;\r\nexport { lin2grid };","import React from 'react';\r\nimport Board from './Board';\r\nimport BoardOverlay from './BoardOverlay';\r\nimport DifficultyRadio from './DifficultyRadio';\r\nimport boardGenerator, { lin2grid } from '../boardGenerator.js';\r\n\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Button from '@material-ui/core/Button';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport CardActions from '@material-ui/core/CardActions';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\r\nimport ExpandLessIcon from '@material-ui/icons/ExpandLess';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport Collapse from '@material-ui/core/Collapse';\r\n\r\nimport {withStyles} from '@material-ui/core/styles';\r\n\r\nconst styles = theme => ({\r\n  containerCard: {\r\n    minHeight: 292,\r\n    maxWidth: 550,\r\n    margin: 'auto',\r\n    padding: 10,\r\n  },\r\n  cardContent: {\r\n    width: '100%',\r\n    display: 'flex',\r\n    justifyContent: 'space-around',\r\n    alignItems: 'center',\r\n  },\r\n  boardAndOverlayContainer: {\r\n    position: 'relative',\r\n  },\r\n  board: {\r\n\r\n  },\r\n  overlay: {\r\n    position: 'absolute',\r\n  },\r\n  controls: {\r\n    display: 'flex',\r\n    flexDirection: 'column',\r\n    height: '100%',\r\n    justifyContent: 'space-around',\r\n    margin: '20px 0',\r\n    textAlign: 'center',\r\n  },\r\n  actionButton: {\r\n    display: 'block',\r\n    margin: 'auto',\r\n    marginBottom: '6px',\r\n  },\r\n  expand: {\r\n    transform: 'rotate(0deg)',\r\n    transition: theme.transitions.create('transform', {\r\n      duration: theme.transitions.duration.shortest,\r\n    }),\r\n  },\r\n  expandOpen: {\r\n    transform: 'rotate(180deg)',\r\n  },\r\n  collapseContainer: {\r\n    // marginBottom:30\r\n  },\r\n});\r\n\r\nclass Game extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      boardData: boardGenerator(props.difficulty),\r\n      activeSquare: 0,\r\n      userPath: [{row:0, col:0}],\r\n      history: [],\r\n      reveal: false,\r\n      expanded: false,\r\n    }\r\n  }\r\n\r\n  handleExpandClick = () => {\r\n    this.setState(state => ({ expanded: !state.expanded }));\r\n  };\r\n\r\n  componentDidUpdate(prevProps) {\r\n    if (prevProps.difficulty !== this.props.difficulty) {\r\n      console.log('updating board');\r\n      this.setState({\r\n        activeSquare: 0,\r\n        boardData: boardGenerator(this.props.difficulty),\r\n        path: [{row:0, col:0}],\r\n        reveal: false\r\n      });\r\n\r\n  }\r\n}\r\n\r\n  isSuccessor(i) {\r\n    let active = this.state.activeSquare;\r\n    let board = this.state.boardData.board;\r\n    let sameColumn = ((i - active) % this.state.boardData.size === 0);\r\n    let sameRow = (Math.floor(i/this.state.boardData.size) === Math.floor(active/this.state.boardData.size));\r\n    let horizontalAway = (Math.abs(i-active) === board[active]);\r\n    let verticalAway = (Math.abs(Math.floor(i / this.state.boardData.size) - Math.floor(active / this.state.boardData.size)) === board[active]);\r\n    return ((sameRow && horizontalAway) || (sameColumn && verticalAway)); \r\n  }\r\n\r\n  handleClick(i) {\r\n    if (this.isSuccessor(i)) {\r\n      // update history\r\n      let history = this.state.history.slice();\r\n      history.push({\r\n        activeSquare: this.state.activeSquare,\r\n        userPath: this.state.userPath\r\n      });\r\n      \r\n      // update path\r\n      let coor = lin2grid(i, this.state.boardData.size);\r\n      let userPath = this.state.userPath.concat(coor);\r\n\r\n      this.setState({\r\n        activeSquare: i,\r\n        userPath,\r\n        history\r\n      });\r\n    }\r\n  }\r\n\r\n  handleSolveClick() {\r\n    this.setState({reveal: !this.state.reveal});\r\n  }\r\n\r\n  handleUndo() {\r\n    if (this.state.history.length === 0) return;\r\n    let { history } = this.state;\r\n    let last = history.pop();\r\n    this.setState({\r\n      activeSquare: last.activeSquare,\r\n      userPath: last.userPath,\r\n      history: history\r\n    });\r\n  }\r\n\r\n  render() {\r\n    const { classes } = this.props;\r\n    console.log(classes);\r\n    let goal = this.state.boardData.size**2 - 1;\r\n    let activeSquare = lin2grid(this.state.activeSquare, this.state.boardData.size);\r\n    let string = this.state.activeSquare === goal ? \r\n      this.state.userPath.length === this.state.boardData.solution.length ?\r\n        (<Typography variant='subtitle2'>You win!</Typography>)\r\n        :\r\n        (<Typography variant='subtitle2'>Good job! {<br/>}But that's not the shortest solution...</Typography>)\r\n      : \r\n      (<Typography variant='subtitle2'>{`Active square: (${activeSquare.row}, ${activeSquare.col})`}</Typography>);\r\n    return(\r\n      <Card className={classes.containerCard}>\r\n      <CardContent className={classes.cardContent}>\r\n        <div className={classes.boardAndOverlayContainer}>\r\n          <div className={classes.overlay}>\r\n            <BoardOverlay \r\n              size={this.state.boardData.size}\r\n              path={this.state.reveal ? this.state.boardData.solution : this.state.userPath}\r\n            />\r\n          </div>\r\n          <Board\r\n            className={classes.board}\r\n            squares={this.state.boardData.board}\r\n            difficulty={this.props.difficulty} \r\n            size={this.state.boardData.size}\r\n            onClick={(i) => this.handleClick(i)}\r\n          />\r\n        </div>\r\n        <div className={classes.controls}>\r\n          {string}\r\n          <Divider style={{margin:'16px 0'}}/>\r\n          <div>\r\n            <Button \r\n              className={classes.actionButton} \r\n              variant='outlined' \r\n              color='inherit'\r\n              size='small'\r\n              onClick={() => this.handleUndo()}\r\n            >\r\n              Undo\r\n            </Button>\r\n            <Button \r\n              className={classes.actionButton} \r\n              variant='outlined' \r\n              color='inherit' \r\n              size='small'\r\n              onClick={() => this.handleSolveClick()}\r\n            >\r\n              {this.state.reveal ? 'Hide solution' : 'Reveal solution'}\r\n            </Button>\r\n          </div>\r\n        </div>\r\n        </CardContent>\r\n        <CardActions className={classes.actions} disableActionSpacing>\r\n          <Typography variant='caption' style={{marginLeft:'auto'}} onClick={this.handleExpandClick}>Change difficulty</Typography>\r\n          <IconButton\r\n            className={this.state.expanded ? classes.expandOpen : classes.expand}\r\n            onClick={this.handleExpandClick}\r\n            aria-expanded={this.state.expanded}\r\n            aria-label=\"Show more\"\r\n          >\r\n            <ExpandMoreIcon />\r\n          </IconButton>\r\n        </CardActions>\r\n        <Collapse in={this.state.expanded} className={classes.collapseContainer}>\r\n          <CardContent style={{textAlign:'right'}}>\r\n            <DifficultyRadio\r\n              difficulty={this.props.difficulty}\r\n              onChange={this.props.handleRadioChange}\r\n            />          \r\n          </CardContent>\r\n        </Collapse>\r\n      </Card>\r\n    );\r\n  }\r\n}\r\n\r\nexport default withStyles(styles)(Game);","import React from 'react';\nimport Game from './Game.js';\n\nimport Paper from '@material-ui/core/Paper';\nimport Typography from '@material-ui/core/Typography';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport {withStyles} from '@material-ui/core/styles';\n\nconst styles = ({\n  gameContainer: {\n    paddingTop: '20px',\n  },\n  textContainer: {\n    padding: 26,\n    maxWidth: 600,\n    margin: 'auto',\n  }\n});\n\nclass App extends React.Component {\n  \n  constructor(props) {\n    super(props);\n    this.state = {\n      difficulty: 5\n    }\n  }\n\n  handleOptionChange = (i) => {\n    const newDifficulty = i + 1;\n    console.log(`${newDifficulty} has been selected!`);\n    this.setState( { difficulty: newDifficulty } );\n    this.forceUpdate();\n  }\n\n  render() {\n    const { classes } = this.props;\n    return (\n      <>\n      <Paper className={classes.gameContainer}>\n        <div>\n          <Game\n            difficulty={this.state.difficulty}\n            handleRadioChange={this.handleOptionChange}\n          />   \n        </div>\n        <div className={classes.textContainer}>\n          <Typography variant='h6'>The Rook Jumping Maze</Typography>\n          <Typography paragraph>Starting at the square in the upper-left corner, find a path to the \"0\" square in the bottom-right corner.  From each numbered square, one may move that exact number of squares horizontally or vertically.  What's the shortest path you can find?</Typography>\n          <Typography variant='h6'>Generating the Maze</Typography>\n          <Typography paragraph>Initially, the maze is just a randomly generated grid of numbers, not guaranteed to be easy, challenging, or even solvable! The final maze (displayed now) is generated by an artificial intelligence algorithm known as {(<strong><em>hill climbing</em></strong>)}. One non-goal square is randomly changed, and the new maze is evaluated. If it is better, it replaces the old maze. Thus, the maze climbs \"uphill.\" This repeats until a new maze meets a certain \"goodness\" threshold. This evaluation is done by an {(<strong><em>objective function</em></strong>)}.</Typography>\n          <Typography variant='h6'>The Objective Function</Typography>\n          <Typography paragraph>The greatest creative work on this project is in defining the objective function, which takes a maze, and returns a number representing the \"goodness\" of the maze. The current implementation of the objective function currently only weighs solvability and shortest-solution length, which is discovered by a simple {(<strong><em>breadth-first search</em></strong>)}.</Typography>\n          <Typography variant='h6'>Optimizations</Typography>\n          <Typography paragraph>This project includes a few optimizations to classical algorithms, and could be expanded to include several more.\n            <List>\n              <ListItem><Typography><Typography variant='subtitle2' inline={true}>Initial generation</Typography> &nbsp;Opposed to truly random values in each square, the maze is initially seeded with only squares from which there exists a legal move. This drastically reduces the number of \"black holes,\" or dead ends from which the player can't continue. That in turn increases the chance that a maze is solvable and increases the branching factor at each step, which increases complexity.</Typography></ListItem>\n              <ListItem><Typography><Typography variant='subtitle2' inline={true}>Random restart</Typography> &nbsp;Random-restart hill climbing adopts the well-known adage, \"If at first you don't succeed, try, try again.\" If the goodness of the maze hasn't passed the threshold after a certain number of iterations of the hill-climbing algorithm, the process restarts with a new initial maze.</Typography></ListItem>\n            </List>\n          </Typography>\n        </div>\n      </Paper>\n      </>\n    );\n  }\n}\n\nexport default withStyles(styles)(App);\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './components/App';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));"],"sourceRoot":""}