{"version":3,"sources":["components/Board.js","components/BoardOverlay.js","components/DifficultyRadio.js","boardGenerator.js","components/Game.js","components/App.js","index.js"],"names":["Square","props","react_default","a","createElement","Button_default","className","classes","square","onClick","value","Board","i","_this","this","key","squares","rows","size","j","index","push","renderSquare","styles","Component","withStyles","background","border","borderRadius","float","fontSize","fontWeight","lineHeight","height","width","minWidth","marginRight","marginTop","padding","textAlign","display","BoardOverlay","_this$props","x","y","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","path","Symbol","iterator","next","done","coor","col","boxWidth","row","boxHeight","err","return","shapes","length","xDiff","yDiff","x1","Math","sign","y1","d","concat","stroke","fill","cx","cy","r","overlay","DifficultyRadio","buttons","_loop","ToggleButton_default","radioButton","variant","disabled","difficulty","onChange","ToggleButtonGroup_default","exclusive","randomInt","max","round","random","floor","lin2grid","GameBoard","board","fitness","arguments","solution","isSuccessor","gameBoard","active","sameColumn","sameRow","horizontalAway","abs","verticalAway","curr","frontier","explored","goal","paths","0","shift","successors","_i","_successors","successor","includes","hasOwnProperty","getNeighbor","neighbor","slice","initGameBoard","Array","pow","pos","boardGenerator","restartRate","_ret","forEach","iterations","console","log","v","NumIterations","dist_default","style","first-child","visibility","format","Game","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","handleExpandClick","setState","state","expanded","boardData","activeSquare","userPath","history","reveal","bounce","prevProps","prevState","_this2","forceUpdate","setTimeout","last","pop","_this3","string","Fragment","Card_default","containerCard","CardContent_default","Grid_default","container","spacing","justifyContent","item","xs","sm","boardAndOverlayContainer","overlayContainer","components_BoardOverlay","verticalAlign","Fab_default","actionButton","Undo_default","Restore_default","components_Board","handleClick","color","handleUndo","lib","animationOut","animationOutDelay","isVisible","animationInDuration","handleReset","secondaryPanel","Typography_default","gameMessageContainer","Divider_default","margin","revealButton","handleSolveClick","CardActions_default","actions","disableActionSpacing","marginLeft","cursor","IconButton_default","expandOpen","expand","aria-expanded","aria-label","ExpandMore_default","Collapse_default","in","collapseContainer","components_DifficultyRadio","handleRadioChange","React","theme","_secondaryPanel","maxWidth","cardContent","alignItems","position","flexDirection","defineProperty","breakpoints","down","up","transform","transition","transitions","create","duration","shortest","createMuiTheme","values","md","lg","xl","App","handleOptionChange","newDifficulty","core_styles","Paper_default","gameContainer","components_Game","textContainer","paragraph","List_default","ListItem_default","inline","paddingTop","ReactDOM","render","components_App","document","getElementById"],"mappings":"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","file":"static/js/main.71a3ee8c.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\nimport {withStyles} from '@material-ui/core/styles';\r\nimport Button from '@material-ui/core/Button';\r\n\r\nconst styles = ({\r\n    square: {\r\n        background: 'rgba(255, 255, 255, 0)',\r\n        border: '1px solid #999',\r\n        borderRadius: 0,\r\n        float: 'left',\r\n        fontSize: '22px',\r\n        fontWeight: 'bold',\r\n        lineHeight: '34px',\r\n        height: '34px',\r\n        width: '34px',\r\n        minWidth: '34px',\r\n        marginRight: '-1px',\r\n        marginTop: '-1px',\r\n        padding: 0,\r\n        textAlign: 'center',\r\n      },\r\n    rows: {\r\n      display: 'inline-block',\r\n    },\r\n});\r\n\r\nfunction Square(props) {\r\n  return (\r\n    <Button className={props.classes.square} onClick={props.onClick}>\r\n      {props.value}\r\n    </Button>\r\n  );\r\n}\r\n  \r\n  class Board extends Component {\r\n  \r\n  renderSquare(i) {\r\n    return(\r\n      <Square\r\n        key={i}\r\n        value={this.props.squares[i]}\r\n        onClick={() => this.props.onClick(i)}\r\n        classes={this.props.classes}\r\n        />\r\n    );\r\n  }\r\n    \r\n    render() {\r\n      let rows = []\r\n      const { classes } = this.props;\r\n      for (let i = 0; i < this.props.size; i++) {\r\n        let squares = [];\r\n        for (let j = 0; j < this.props.size; j++) {\r\n          let index = i * this.props.size + j;\r\n          squares.push(this.renderSquare(index));\r\n        }\r\n        rows.push(<div key={i} styles={{}}>{squares}</div>);\r\n      }\r\n  \r\n  \r\n      return(\r\n        <div className={classes.rows}>\r\n          {rows}\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n\r\nexport default withStyles(styles)(Board);","import React, {Component} from 'react';\r\nimport {withStyles} from '@material-ui/core/styles';\r\n\r\nlet boxWidth = 33;\r\nlet boxHeight = 33;\r\n\r\nconst styles = ({\r\n  overlay: {\r\n  }\r\n});\r\n\r\nclass BoardOverlay extends Component {\r\n\r\n  render() {\r\n    const { classes, size } = this.props;\r\n    \r\n    let x = [] \r\n    let y = [];\r\n    for (let coor of this.props.path || []) {\r\n      x.push(coor.col * boxWidth + boxWidth/2);\r\n      y.push(coor.row * boxHeight + boxHeight/2);\r\n    }\r\n\r\n    let shapes = []\r\n    for (let i = 0; i < this.props.path.length - 1; i++) {\r\n      let xDiff = x[i+1] - x[i];\r\n      let yDiff = y[i+1] - y[i];\r\n      let x1 = ( xDiff / 2 ) || ( 10 * Math.sign(yDiff) );\r\n      let y1 = ( yDiff / 2 ) || ( -10 * Math.sign(xDiff) );\r\n      shapes.push(<path key={i*2} d={`M ${x[i]} ${y[i]} Q ${x[i] + x1} ${y[i] + y1}, ${x[i+1]} ${y[i+1]}`} stroke=\"black\" fill=\"transparent\"/>);\r\n      shapes.push(<circle key={i*2 + 1} cx={x[i+1]} cy={y[i+1]} r=\"3\" fill=\"red\" />);\r\n    }\r\n\r\n    return (\r\n      <svg className={classes.overlay} height={boxHeight * size} width={boxWidth * size}>\r\n        {shapes}\r\n      </svg>\r\n    );\r\n  }\r\n}\r\n\r\nexport default withStyles(styles)(BoardOverlay);","import React, {Component} from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport ToggleButton from '@material-ui/lab/ToggleButton';\r\nimport ToggleButtonGroup from '@material-ui/lab/ToggleButtonGroup';\r\nimport {withStyles} from '@material-ui/core/styles';\r\n\r\nconst styles = ({\r\n  radioButton: {\r\n    minWidth: 40,\r\n  },\r\n});\r\n\r\nclass DifficultyRadio extends Component {\r\n    render() {\r\n      const { classes } = this.props;\r\n      let buttons = [];\r\n      for (let i = 0; i < 10; i++) {\r\n        buttons.push(\r\n          <ToggleButton className={classes.radioButton}\r\n            key={i}\r\n            variant='contained'\r\n            size='small'\r\n            value={i + 1}\r\n            disabled={this.props.difficulty == i + 1}\r\n            onClick={() => this.props.onChange(i)}\r\n          >\r\n            {i + 1}\r\n          </ToggleButton>\r\n        );\r\n      }\r\n      return(\r\n        <ToggleButtonGroup exclusive value={this.props.i}>\r\n          {buttons}\r\n        </ToggleButtonGroup>\r\n      );\r\n    }\r\n  }\r\n  \r\n  export default withStyles(styles)(DifficultyRadio);","function randomInt(max) {\r\n    return Math.round(Math.random() * Math.floor(max));\r\n  }\r\n\r\n// function weightedRandom(max, min=1) {\r\n//     // found in comments of https://stackoverflow.com/questions/8435183/generate-a-weighted-random-number\r\n//     // tends exponentially to min\r\n//     return max + 1 - Math.round(max / (Math.random() * max + min));\r\n// }\r\n\r\n// function grid2lin(pos, size) {\r\n//     return pos.row * size + pos.col;\r\n// }\r\n\r\nfunction lin2grid(i, size) {\r\n    return {\r\n        row: Math.floor(i / size),\r\n        col: i % size\r\n    };\r\n}\r\n\r\nfunction GameBoard(board, size, difficulty, fitness=0, solution=null) {\r\n    return {board, size, difficulty, fitness, solution};\r\n}\r\n\r\nfunction isSuccessor(gameBoard, active, i) {\r\n    let board = gameBoard.board;\r\n    let size = gameBoard.size;\r\n    let sameColumn = ((i - active) % size === 0);\r\n    let sameRow = (Math.floor(i/size) === Math.floor(active/size));\r\n    let horizontalAway = (Math.abs(i-active) === board[active]);\r\n    let verticalAway = (Math.abs(Math.floor(i / size) - Math.floor(active / size)) === board[active]);\r\n    return ((sameRow && horizontalAway) || (sameColumn && verticalAway)); \r\n  }\r\n\r\nfunction fitness(gameBoard) {\r\n    // fitness of board, fitness of 0 means no solutions.\r\n    let fitness = 0;\r\n    let frontier = [];\r\n    let explored = [];\r\n    let goal = gameBoard.board.length - 1;\r\n\r\n    let paths = {\r\n        0: [0],\r\n    }    \r\n\r\n    frontier.push(0);\r\n    let curr;\r\n    while (frontier.length !== 0) {\r\n        curr = frontier.shift();\r\n        explored.push(curr);\r\n        let successors = [];\r\n        // TODO: optimize this\r\n        for (let i = 0; i < gameBoard.board.length; i++) {\r\n            if (isSuccessor(gameBoard, curr, i)) {\r\n                successors.push(i);\r\n            }\r\n        }\r\n        for (let successor of successors) {\r\n            // test for solvability\r\n            if (successor === goal) fitness = 1;\r\n            if (!explored.includes(successor) && !frontier.includes(successor)) {\r\n                frontier.push(successor);\r\n                paths[successor] =  paths[curr].concat(successor);\r\n            } \r\n        };\r\n    }\r\n    if (paths.hasOwnProperty(goal)) fitness *= paths[goal].length / gameBoard.difficulty;\r\n\r\n    return GameBoard(gameBoard.board, gameBoard.size, gameBoard.difficulty, fitness, paths[goal]);\r\n}\r\n\r\nfunction getNeighbor(gameBoard) {\r\n    // randomly change a square's value to the value of another square.\r\n    // This bypasses the need to calculate the max permissible value.\r\n    // Swap with any square other than goal(choose from index 0 to length - 2), which is 0.\r\n    let neighbor = gameBoard.board.slice();\r\n    neighbor[randomInt(neighbor.length - 2)] = neighbor[randomInt(neighbor.length - 2)];\r\n    return fitness(GameBoard(neighbor, gameBoard.size, gameBoard.difficulty));\r\n}\r\n\r\nfunction initGameBoard(size, difficulty) {\r\n    let board = Array(size**2).fill(null);\r\n    \r\n    for (let i = 0; i < size**2; i++) {\r\n        let pos = lin2grid(i, size);\r\n        let max = Math.max(Math.abs(pos.row - Math.floor(size/2)), Math.abs(pos.col - Math.floor(size/2))) + Math.floor(size/2);\r\n        // one's tricks to make sure we don't get any zeros\r\n        board[i] = randomInt(max - 1) + 1;\r\n    }\r\n\r\n    board[board.length - 1] = 0;\r\n\r\n    return fitness(GameBoard(board, size, difficulty));\r\n}\r\n\r\nfunction boardGenerator(difficulty) {\r\n    let restartRate = 30 + 10 * difficulty;\r\n    let size = Math.floor((difficulty - 1)/3) + 4;\r\n    let gameBoard = initGameBoard(size, difficulty);\r\n\r\n    // hill climb with random restart\r\n    // infinite loop, with inc variable\r\n    for (let i = 0; true; i++) {\r\n        let neighbor = getNeighbor(gameBoard);\r\n        if (neighbor.fitness > gameBoard.fitness) {\r\n            gameBoard = neighbor;\r\n        }\r\n\r\n        if (gameBoard.fitness > 1) {\r\n            //prep for return\r\n            let solution = [];\r\n            gameBoard.solution.forEach(i => solution.push(lin2grid(i, gameBoard.size)));\r\n            gameBoard.solution = solution;\r\n            gameBoard.iterations = i + 1;\r\n            console.log(gameBoard);\r\n            return gameBoard;\r\n        } else if (i % restartRate === 0) {\r\n            // RANDOM RESTART\r\n            gameBoard = initGameBoard(size, difficulty);\r\n        }\r\n    }\r\n}\r\n\r\nexport default boardGenerator;\r\nexport { lin2grid };","import React from 'react';\r\nimport Board from './Board';\r\nimport BoardOverlay from './BoardOverlay';\r\nimport DifficultyRadio from './DifficultyRadio';\r\nimport boardGenerator, { lin2grid } from '../boardGenerator.js';\r\n\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Button from '@material-ui/core/Button';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Fab from '@material-ui/core/Fab';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport CardActions from '@material-ui/core/CardActions';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport Collapse from '@material-ui/core/Collapse';\r\n\r\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\r\nimport UndoIcon from '@material-ui/icons/Undo';\r\nimport RestoreIcon from '@material-ui/icons/Restore';\r\n\r\nimport {withStyles} from '@material-ui/core/styles';\r\n\r\nimport Odometer from 'react-odometerjs';\r\nimport 'odometer/themes/odometer-theme-plaza.css';\r\nimport { Animated } from \"react-animated-css\";\r\n\r\nconst styles = theme => ({\r\n  containerCard: {\r\n    maxWidth: 620,\r\n    margin: 'auto',\r\n    padding: 10,\r\n  },\r\n  cardContent: {\r\n    // width: '100%',\r\n    display: 'flex',\r\n    justifyContent: 'space-around',\r\n    alignItems: 'center',\r\n  },\r\n  boardAndOverlayContainer: {\r\n    position: 'relative',\r\n    height: 256,\r\n    minWidth: 256,\r\n    display: 'flex',\r\n    alignItems: 'center',\r\n    justifyContent: 'center',\r\n  },\r\n  board: {\r\n  },\r\n  overlayContainer: {\r\n    position: 'absolute',\r\n  },\r\n  overlay: {\r\n    display: 'inline-block',\r\n    verticalAlign: 'middle',\r\n  },\r\n  secondaryPanel: {\r\n    display: 'flex',\r\n    flexDirection: 'column',\r\n    justifyContent: 'space-around',\r\n    textAlign: 'center',\r\n    [theme.breakpoints.down('xs')]: {\r\n      margin: '0 20px',\r\n    },\r\n    [theme.breakpoints.up('sm')]: {\r\n      margin: '20px 0',\r\n    },\r\n  },\r\n  gameMessageContainer: {\r\n    height: 65,\r\n    display: 'flex',\r\n    flexDirection: 'column',\r\n    justifyContent: 'center',\r\n  },\r\n  actionButton: {\r\n    display: 'block',\r\n    margin: '16px 10px',\r\n    // background: blue,\r\n    color: 'white',\r\n  },\r\n  expand: {\r\n    transform: 'rotate(0deg)',\r\n    transition: theme.transitions.create('transform', {\r\n      duration: theme.transitions.duration.shortest,\r\n    }),\r\n  },\r\n  expandOpen: {\r\n    transform: 'rotate(180deg)',\r\n  },\r\n  collapseContainer: {\r\n    // marginBottom:30\r\n  },\r\n});\r\n\r\nfunction NumIterations(props) {\r\n  return (\r\n  <Odometer \r\n  style={{\r\n    'first-child':{\r\n      visibility: 'hidden'\r\n    }\r\n  }} \r\n  value={props.i}\r\n  format='(ddd)'\r\n  />);\r\n};\r\n\r\nclass Game extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      boardData: boardGenerator(props.difficulty),\r\n      activeSquare: 0,\r\n      userPath: [{row:0, col:0}],\r\n      history: [],\r\n      reveal: false,\r\n      expanded: false,\r\n      bounce: false,\r\n    }\r\n  }\r\n\r\n  handleExpandClick = () => {\r\n    this.setState(state => ({ expanded: !state.expanded }));\r\n  };\r\n\r\n  componentDidUpdate(prevProps, prevState) {\r\n    if (prevProps.difficulty !== this.props.difficulty) {\r\n      console.log('updating board');\r\n      this.setState({\r\n        activeSquare: 0,\r\n        boardData: boardGenerator(this.props.difficulty),\r\n        userPath: [{row:0, col:0}],\r\n        reveal: false\r\n      });\r\n  }\r\n  const goal = this.state.boardData.size**2 - 1;\r\n  console.log(this.state.activeSquare, goal, prevState.activeSquare, goal);\r\n  if (this.state.activeSquare === goal && prevState.activeSquare !== goal\r\n    && this.state.userPath.length > this.state.boardData.solution.length) {\r\n    console.log('bouncing!');\r\n    this.setState({bounce: true});\r\n    this.forceUpdate(() => {\r\n      setTimeout(() => {\r\n        this.setState({bounce: false});\r\n      }, 1000);\r\n    });\r\n    }\r\n  //   setTimeout(() => {\r\n  //     console.log('bouncing timeout');\r\n  //     this.setState({bounce: false});\r\n  //   }, 500);\r\n  // }\r\n  // if (this.state.bounce) {\r\n  //   console.log('not bouncing');\r\n  //   this.setState({bounce: false});\r\n  // } \r\n}\r\n\r\n  isSuccessor(i) {\r\n    let active = this.state.activeSquare;\r\n    let board = this.state.boardData.board;\r\n    let sameColumn = ((i - active) % this.state.boardData.size === 0);\r\n    let sameRow = (Math.floor(i/this.state.boardData.size) === Math.floor(active/this.state.boardData.size));\r\n    let horizontalAway = (Math.abs(i-active) === board[active]);\r\n    let verticalAway = (Math.abs(Math.floor(i / this.state.boardData.size) - Math.floor(active / this.state.boardData.size)) === board[active]);\r\n    return ((sameRow && horizontalAway) || (sameColumn && verticalAway)); \r\n  }\r\n\r\n  handleClick(i) {\r\n    if (this.isSuccessor(i)) {\r\n      // update history\r\n      let history = this.state.history.slice();\r\n      history.push({\r\n        activeSquare: this.state.activeSquare,\r\n        userPath: this.state.userPath\r\n      });\r\n      \r\n      // update path\r\n      let coor = lin2grid(i, this.state.boardData.size);\r\n      let userPath = this.state.userPath.concat(coor);\r\n\r\n      this.setState({\r\n        activeSquare: i,\r\n        userPath,\r\n        history\r\n      });\r\n    }\r\n  }\r\n\r\n  handleSolveClick() {\r\n    this.setState({reveal: !this.state.reveal});\r\n  }\r\n\r\n  handleUndo() {\r\n    if (this.state.history.length === 0) return;\r\n    let { history } = this.state;\r\n    let last = history.pop();\r\n    this.setState({\r\n      activeSquare: last.activeSquare,\r\n      userPath: last.userPath,\r\n      history: history\r\n    });\r\n  }\r\n\r\n  handleReset() {\r\n    this.setState({\r\n      activeSquare: 0,\r\n      userPath: [{row:0, col:0}],\r\n      reveal: false\r\n    });\r\n  }\r\n\r\n  render() {\r\n    const { classes } = this.props;\r\n    const goal = this.state.boardData.size**2 - 1;\r\n    const activeSquare = lin2grid(this.state.activeSquare, this.state.boardData.size);\r\n    const string = this.state.activeSquare === goal ? \r\n      this.state.userPath.length === this.state.boardData.solution.length ?\r\n        (<>You win!</>)\r\n        :\r\n        (<>Good job! {<br/>}But that's not the shortest solution...</>)\r\n      : \r\n      (<>{`Active square: (${activeSquare.row}, ${activeSquare.col})`}</>);\r\n    return(\r\n      <Card className={classes.containerCard}>\r\n      <CardContent>\r\n        <Grid container spacing={0} styles={{justifyContent: 'center', }}>\r\n          <Grid item xs={12} sm={6} className={classes.boardAndOverlayContainer}>\r\n            <div className={classes.overlayContainer}>\r\n              <div className={classes.overlay}>\r\n                <BoardOverlay\r\n                  size={this.state.boardData.size}\r\n                  path={this.state.reveal ? this.state.boardData.solution : this.state.userPath}\r\n                />\r\n              </div>\r\n              <div style={{visibility:'hidden', display:'inline-block', verticalAlign:'middle',}}>\r\n                {/* fake button */}\r\n                <Fab \r\n                  size='small'\r\n                  className={classes.actionButton}\r\n                >\r\n                  <UndoIcon/>\r\n                </Fab>\r\n                {/* fake button */}\r\n                <Fab\r\n                  size='small'\r\n                  className={classes.actionButton}\r\n                >\r\n                  <RestoreIcon/>\r\n                </Fab>\r\n              </div>\r\n            </div>\r\n            <Board\r\n              className={classes.board}\r\n              squares={this.state.boardData.board}\r\n              difficulty={this.props.difficulty} \r\n              size={this.state.boardData.size}\r\n              onClick={(i) => this.handleClick(i)}\r\n            />\r\n            <div>\r\n            <Fab \r\n              className={classes.actionButton} \r\n              size='small'\r\n              color='primary'\r\n              onClick={() => this.handleUndo()}\r\n            >\r\n              <UndoIcon/>\r\n            </Fab>\r\n            <Animated\r\n              animationOut='bounce'\r\n              animationOutDelay={300}\r\n              isVisible={!this.state.bounce}\r\n              animationInDuration={0}\r\n            >\r\n              <Fab\r\n                className={classes.actionButton}\r\n                size='small'\r\n                color='secondary'\r\n                onClick={() => this.handleReset()}\r\n              >\r\n                <RestoreIcon/>\r\n              </Fab>\r\n            </Animated>\r\n          </div>\r\n          </Grid>\r\n          <Grid item xs={12} sm={5} className={classes.secondaryPanel}>\r\n            <Typography container='div' variant='caption'>\r\n              Maze successfully generated after <NumIterations i={this.state.boardData.iterations} classes={classes}/> iterations.\r\n            </Typography>\r\n            <div className={classes.gameMessageContainer}>\r\n              <Typography variant='subtitle2'>\r\n                {string}\r\n              </Typography>\r\n            </div>\r\n            <Divider style={{margin:'16px 0'}}/>\r\n            <div>\r\n              <Button \r\n                className={classes.revealButton} \r\n                variant={this.state.reveal ? 'outlined' : 'contained'}\r\n                color='inherit' \r\n                size='small'\r\n                onClick={() => this.handleSolveClick()}\r\n              >\r\n                Reveal solution\r\n              </Button>\r\n            </div>\r\n          </Grid>\r\n          </Grid>\r\n        </CardContent>\r\n        <CardActions className={classes.actions} disableActionSpacing>\r\n          <Typography variant='caption' style={{marginLeft:'auto', cursor: 'pointer'}} onClick={this.handleExpandClick}>Change difficulty</Typography>\r\n          <IconButton\r\n            className={this.state.expanded ? classes.expandOpen : classes.expand}\r\n            onClick={this.handleExpandClick}\r\n            aria-expanded={this.state.expanded}\r\n            aria-label=\"Show more\"\r\n          >\r\n            <ExpandMoreIcon />\r\n          </IconButton>\r\n        </CardActions>\r\n        <Collapse in={this.state.expanded} className={classes.collapseContainer}>\r\n          <CardContent style={{textAlign:'right'}}>\r\n            <DifficultyRadio\r\n              difficulty={this.props.difficulty}\r\n              onChange={this.props.handleRadioChange}\r\n            />          \r\n          </CardContent>\r\n        </Collapse>\r\n      </Card>\r\n    );\r\n  }\r\n}\r\n\r\nexport default withStyles(styles)(Game);","import React from 'react';\nimport Game from './Game.js';\n\nimport Paper from '@material-ui/core/Paper';\nimport Typography from '@material-ui/core/Typography';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport { MuiThemeProvider, createMuiTheme } from '@material-ui/core/styles';\nimport { withStyles } from '@material-ui/core/styles';\n\nconst theme = createMuiTheme({\n  breakpoints: {\n    values: {\n      xs: 0,\n      sm: 685,\n      md: 960,\n      lg: 1280,\n      xl: 1920\n    }\n  }\n});\n\nconst styles = ({\n  gameContainer: {\n    paddingTop: '20px',\n  },\n  textContainer: {\n    padding: 26,\n    maxWidth: 600,\n    margin: 'auto',\n  }\n});\n\nclass App extends React.Component {\n  \n  constructor(props) {\n    super(props);\n    this.state = {\n      difficulty: 5\n    }\n  }\n\n  handleOptionChange = (i) => {\n    const newDifficulty = i + 1;\n    console.log(`${newDifficulty} has been selected!`);\n    this.setState( { difficulty: newDifficulty } );\n    this.forceUpdate();\n  }\n\n  render() {\n    const { classes } = this.props;\n    return (\n      <>\n      <MuiThemeProvider theme={theme}>\n      <Paper className={classes.gameContainer}>\n        <div>\n          <Game\n            difficulty={this.state.difficulty}\n            handleRadioChange={this.handleOptionChange}\n          />   \n        </div>\n        <div className={classes.textContainer}>\n          <Typography variant='h6'>How To Play</Typography>\n          <Typography paragraph>Starting at the square in the upper-left corner, find a path to the \"0\" square in the bottom-right corner.  From each numbered square, you can move that exact number of squares horizontally or vertically.  What's the shortest path you can find?</Typography>\n          <Typography variant='h6'>Generating the Maze</Typography>\n          <Typography paragraph>Initially, the maze is just a randomly generated grid of numbers, not guaranteed to be easy, challenging, or even solvable! The final maze (displayed now) is generated by an artificial intelligence algorithm known as {(<strong><em>hill climbing</em></strong>)}. One non-goal square is randomly changed, and the new maze is evaluated. If it is better, it replaces the old maze. Thus, the maze climbs \"uphill.\" This repeats until a new maze meets a certain \"goodness\" threshold. This evaluation is done by an {(<strong><em>objective function</em></strong>)}.</Typography>\n          <Typography variant='h6'>The Objective Function</Typography>\n          <Typography paragraph>The greatest creative work on this project is in defining the objective function, which takes a maze, and returns a number representing the \"goodness\" of the maze. The current implementation of the objective function currently only weighs solvability and shortest-solution length, which is discovered by a simple {(<strong><em>breadth-first search</em></strong>)}.</Typography>\n          <Typography variant='h6'>Optimizations</Typography>\n          <Typography paragraph>This project includes a few optimizations to classical algorithms, and could be expanded to include several more.\n            <List>\n              <ListItem><Typography><Typography variant='subtitle2' inline={true}>Initial generation</Typography> &nbsp;Opposed to truly random values in each square, the maze is initially seeded with only squares from which there exists a legal move. This drastically reduces the number of \"black holes,\" or dead ends from which the player can't continue. That in turn increases the chance that a maze is solvable and increases the branching factor at each step, which increases complexity.</Typography></ListItem>\n              <ListItem><Typography><Typography variant='subtitle2' inline={true}>Random restart</Typography> &nbsp;Random-restart hill climbing adopts the well-known adage, \"If at first you don't succeed, try, try again.\" If the goodness of the maze hasn't passed the threshold after a certain number of iterations of the hill-climbing algorithm, the process restarts with a new initial maze.</Typography></ListItem>\n            </List>\n          </Typography>\n        </div>\n      </Paper>\n      </MuiThemeProvider>\n      </>\n    );\n  }\n}\n\nexport default withStyles(styles)(App);\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './components/App';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));"],"sourceRoot":""}